# Cursor AI 助手规则配置

## 基本行为规则

### 语言使用
- 始终使用中文与用户沟通
- 所有代码注释和文档使用中文
- 错误消息和用户提示使用中文
- 变量和函数命名使用英文，但注释用中文

### 开发流程
- 每次功能开发前，先列出详细的任务列表供用户确认
- 任务列表应包含具体的开发步骤、预期结果和依赖关系
- 开发过程中及时更新任务状态
- 完成功能后进行测试和验证

### 代码生成规范
- 遵循项目的Django架构模式
- 使用apps.app_name的导入方式
- 模型字段使用verbose_name提供中文显示
- 视图函数使用中文错误和成功消息
- 模板使用TailwindCSS和DaisyUI组件

## 项目特定规则

### Django 模型
- 使用Python Enum定义选择字段
- 外键关系使用related_name明确命名
- 为频繁查询的字段添加数据库索引
- 模型使用Meta类定义verbose_name

### Django 视图
- 使用@login_required装饰器保护需要认证的视图
- 使用@require_http_methods限制HTTP方法
- 使用@ensure_csrf_cookie确保CSRF保护
- 异常处理使用try-catch块并提供中文错误反馈

### Django 模板
- 所有页面模板使用 `{% extends "base.html" %}` 结构
- 局部刷新模板不得包含 `extends`，仅包含HTML片段
- 优先使用Tailwind工具类和DaisyUI组件类
- 禁止使用自定义CSS文件或inline样式

### 安全要求
- 启用CSRF保护
- 邮箱验证码有10分钟过期时间和5次最大尝试次数
- 实现邮箱发送频率限制
- 使用环境变量管理敏感配置

## 代码质量要求

### Python 代码
- 遵循PEP 8代码风格规范
- 使用有意义的变量和函数命名
- 添加适当的中文注释和文档字符串
- 导入语句按标准库、第三方库、本地应用的顺序排列

### 测试要求
- 为关键功能编写单元测试
- 测试覆盖用户认证、邮箱验证、职位申请等核心功能
- 使用Django TestCase进行模型和视图测试

### 性能优化
- 使用select_related和prefetch_related优化数据库查询
- 实现分页功能避免大量数据加载
- 使用数据库索引提高查询性能

## 用户体验要求

### UI/UX 设计
- 响应式设计，支持移动端和桌面端
- 使用DaisyUI组件确保UI一致性
- 提供清晰的用户反馈和错误提示
- 实现用户友好的导航和搜索功能

### 国际化
- 项目使用中文作为主要语言
- 时区设置为'Asia/Shanghai'
- 所有用户界面文本使用中文

## 错误处理

### 异常处理
- 使用Django日志系统记录重要操作
- 用户友好的错误消息使用Django messages框架
- 异常处理使用try-catch块并提供适当的错误反馈

### 调试和测试
- 提供详细的错误信息和调试建议
- 确保代码在开发和生产环境中都能正常运行
- 验证所有功能都符合项目要求

## 注意事项
- 始终遵循Django最佳实践和约定
- 保持代码质量和项目一致性
- 确保所有功能都经过充分测试
- 及时更新相关文档和注释
